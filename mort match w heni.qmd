---
title: "Match Mortality with Heni"
format: html
editor: visual
---

Match mortality rates (unadjusted) and premature mortality with Heni's dataset 

This is incomplete. 


```{r, message = FALSE, warning = FALSE}
#heni's data: 

heni = haven::read_sas("P:/CH-Ranking/Research/model 2.0/WI vitality data/Heni/lbw_mort_wi_heni_updated_fips.sas7bdat")

#raw data 
#create a list of the files from your target directory
file_list <- list.files(path="P:/CH-Ranking/Research/model 2.0/WI vitality data/updated data")

#initiate a blank data frame, each iteration of the loop will append the data from the given file to this variable
lbw = data.frame()
dth = data.frame()
#had to specify columns to get rid of the total column
for (i in 1:length(file_list)){
  temp_file = file_list[i]
  if (grepl("lbw", temp_file, fixed = TRUE) == TRUE) {
  temp_data <- haven::read_sas(paste0("P:/CH-Ranking/Research/model 2.0/WI vitality data/updated data/", temp_file)) 
  temp_data$year = substr(as.numeric(gsub("\\D", "", temp_file)), 1, nchar(as.numeric(gsub("\\D", "", temp_file)))-1) 
  lbw <- rbind(lbw, temp_data) #for each iteration, bind the new data to the building dataset
  } else {
  temp_data <- haven::read_sas(paste0("P:/CH-Ranking/Research/model 2.0/WI vitality data/updated data/", temp_file)) 
  temp_data$year = substr(as.numeric(gsub("\\D", "", temp_file)), 1, nchar(as.numeric(gsub("\\D", "", temp_file)))-1) 
  dth <- rbind(dth, temp_data) #for each iteration, bind the new data to the building dataset
  }
}



library(dplyr)


totdth = dth %>% group_by(year, res_census_block) %>% 
  mutate(sumDeath = sum(totalDeath))
totdth = totdth %>% 
  filter(!(age_group %in% c("75-79", "80-84", "85+"))) %>% 
  group_by(year, res_census_block) %>% 
           mutate(sumPremort = sum(totalDeath)) %>% 
  distinct(res_census_block, year, sumDeath, sumPremort)



```



# Missingness 

Each census tract does not contain data for each year. It is likely that the 2012-2018 data is built upon a different set of CTs than the 2019-2020 data. In order to calculate cumulative sums, it is helpful to create dummy rows for these missing year and census tract combinations. 

First I create dummy rows for ALL years, regardless of whether we expect each CT to be present for that year or not 

```{r, message = FALSE, warning = FALSE}

totdth$year = as.numeric(totdth$year)

library(tidyr)



totdth_c = totdth %>% group_by(res_census_block) %>% complete(year = seq(2012, 2021, 1)) %>% 
  fill(sumDeath, sumPremort) %>% 
  mutate(sumDeath = replace_na(sumDeath, 0), 
         sumPremort = replace_na(sumPremort, 0))
  
```

There were `r nrow(totdth_c) - nrow(totdth)` census tract and year combinations that needed to be appended to the original DTH dataset, resulting from census tracts missing data for some years.   

# Two special datasets 

Next, I create dummy rows for missing years between 2012-2018 separately from CTs that are missing from 2019-2021 since we expect the CTs available in 2012-2018 to be different from the CTs available in 2019-2021. 

```{r}

totdth_c_1218 = totdth %>% filter(year<2019) %>% 
  group_by(res_census_block) %>% complete(year = seq(2012,2018, 1)) %>% 
  fill(sumDeath, sumPremort) %>% 
  mutate(sumDeath = replace_na(sumDeath, 0), 
         sumPremort = replace_na(sumPremort, 0))

totdth_c_1921 = totdth %>% filter(year>=2019) %>% 
  group_by(res_census_block) %>% complete(year = seq(2019, 2021, 1)) %>% 
  fill(sumDeath, sumPremort) %>% 
  mutate(sumDeath = replace_na(sumDeath, 0), 
         sumPremort = replace_na(sumPremort, 0))


totdth_c_sep = rbind(totdth_c_1218, totdth_c_1921)
```
When we add missing/dummy rows without creating two separate year groupings, there are a total of `r nrow(totdth_c)` rows of death data available for a total of `r length(unique(totdth_c$res_census_block))` unique CTs. Meanwhile, when we add missing/dummy rows separately for 2012-2018 and 2019-2021, there are a total of `r nrow(totdth_c_sep)` rows of death data available for a total of `r length(unique(totdth_c_sep$res_census_block))` unique CTs. 


# Get ACS data for population estimates to calculate mortality rates 
Whole population = male total + female = total 

under 75 population = total - sum of all individuals older than 75 

```{r, message = FALSE, warning = FALSE}
vars = tidycensus::load_variables(2020, "acs5", cache = TRUE) #temp dataset to examine which vars are available thru acs without having to go to acs webpage 

years = unique(dth$year)

allacs = data.frame() 
for (i in 1:length(years)) {
acs = tidycensus::get_acs(geography = "tract", 
                          state = "WI", 
                          variables = c(totpop = "B01001_001", 
                                        m85pop = "B01001_025",
                                        m80pop = "B01001_024", 
                                        m75pop = "B01001_023",
                                        mtot = "B01001_002",
                                        ftot = "B01001_026", 
                                        f75pop = "B01001_047",
                                        f80pop = "B01001_048",
                                        f85pop = "B01001_049"), 
                                        year = as.numeric(years[i]))
temp = tidycensus::get_acs(geography = "county", 
                          state = "WI", 
                          variables = c(totpop = "B01001_001", 
                                        year = as.numeric(2021)))

acs$year = years[i]
allacs = rbind(acs, allacs)
}
acsw = pivot_wider(allacs, id_cols = c(GEOID,year), names_from = variable, values_from = estimate)
temp = acsw$totpop - (acsw$ftot + acsw$mtot) #confirmation that ftot + mtot = totpop 
 
pops = acsw %>% group_by(GEOID, year) %>% 
  mutate(sub75 = totpop - m85pop - m80pop - m75pop
         - f85pop - f80pop - f75pop) %>% 
  select(totpop, sub75, GEOID, year) 
pops$statecode = substr(pops$GEOID, 1,2) 
pops$countycode = substr(pops$GEOID, 3,5)
pops$tract = substr(pops$GEOID, 6, nchar(pops$GEOID))

```

# Merge Pops with DHS data 


```{r, message = FALSE, warning = FALSE}
dthpop = merge(totdth, pops, by.x = c("res_census_block", "year"), by.y = c("GEOID", "year"))
```




# Calculation of rolling sums for Mortality and Premortality 

```{r, message = FALSE, warning = FALSE}


library(RcppRoll)


dth_roll = totdth_c %>% arrange(year) %>% group_by(res_census_block) %>% 
  mutate(twoyeardeath = roll_sum(sumDeath, 2, fill = NA, align = "left"),
         threeyeardeath = roll_sum(sumDeath, 3, fill = NA, align = "left"),
         fiveyeardeath = roll_sum(sumDeath, 5, fill = NA, align = "left"),
         sevenyeardeath = roll_sum(sumDeath, 7, fill = NA, align = "left"),
         tenyeardeath = roll_sum(sumDeath, 10, fill = NA, align = "left"),
         twoyearPremort = roll_sum(sumPremort, 2, fill = NA, align = "left"),
         threeyearPremort = roll_sum(sumPremort, 3, fill = NA, align = "left"),
         fiveyearPremort = roll_sum(sumPremort, 5, fill = NA, align = "left"),
         sevenyearPremort = roll_sum(sumPremort, 7, fill = NA, align = "left"),
         tenyearPremort = roll_sum(sumPremort, 10, fill = NA, align = "left"))


```


# Calculation of Mortality and Premortality Rates for each CT 
```{r, message = FALSE, warning = FALSE}


dth_rates = totdth %>% group_by(res_census_block, year) %>% 
  mutate(dthrate = sumDeath)
```


